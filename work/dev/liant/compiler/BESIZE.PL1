/* C++ be_size.pl1 - Determine the machine size of a type */

/***********************************************************************
 * This product is the property of Language Processors, Inc. and is    *
 * licensed pursuant to a written license agreement.  No portion of    *
 * this product may be reproduced without the written permission of    *
 * Language Processors, Inc. except pursuant to the license agreement. *
 ***********************************************************************/

/***********************************************************************
 *
 *  LPI EDIT HISTORY               [ Update the VERSION__ string below ]
 *
 *  01.17.90  TLF  000  Original.  Derived from ANSI-C sizet.pl1.
 *
 ***********************************************************************/

/* ---------------------------------------------------------------------
/* Version and copyright stamp
/* ------------------------------------------------------------------- */

declare	VERSION__	character (80) varying static internal initial

('@(#)BE_SIZE  000  01/17/90  (c) 1990 Language Processors, Inc.');



/* ---------------------------------------------------------------------
/* Include files
/* ------------------------------------------------------------------- */

%include 'incfil';
%include GLOBAL_IN;             /* Globals, utilities   */
%include UTILITYDCLS_IN;
%include ADDXRF_DCL;
%include ROUNDU_DCL;
%include C_STANDARD_DEFS_IN;
%include C_EXTERNAL_NAME_MAP_IN;
%include C_TARGET_HARDWARE_IN;
%include C_NODE_MGR_PKG;
%include C_SYMBOL_TABLE_IN;
%include C_VOP_DEFS_IN;
%include C_SIZET_IN;
/*  %include C_ENTRIES_PKG; */
%include OPERATOR_UTILS_DCL;


SIZE_FROM_TYPE: procedure (TYPE, ID, SIZE, BOUNDARY)
       external ( X_SIZE_FROM_TYPE );

	declare
		TYPE			fixed binary (15),
		ID			fixed binary (15),
		SIZE			fixed binary (31),
		BOUNDARY		fixed binary (15);

	declare
		SNID			type (SNID_T),
	/*	C			fixed binary (15),  */
		SIZE_UNITS		fixed binary (15);



/*****
/*	if (TYPE = FIELD_TC) &
/*	   (ID < 0) &
/*	   ((-ID) >= lbound(FIELD_SIZE_TABLE,1)) &
/*	   ((-ID) <= hbound(FIELD_SIZE_TABLE,1)) then do;
/*		/*
/*		/* Special call to determine the size/alignment
/*		/* of different typed bit-fields.
/*		/**/
/*		SIZE = FIELD_SIZE_TABLE (-ID);
/*		BOUNDARY = FIELD_BOUNDARY_TABLE (-ID);
/*	end;
/*
/*	else if TYPE <= hbound(SIZE_TABLE,1) then do;
*****/
	if TYPE <= hbound(SIZE_TABLE,1) then do;
		SIZE = SIZE_TABLE(TYPE);
		BOUNDARY = BOUNDARY_TABLE(TYPE);
	end;

	else if ID ^= 0 then do;
		call SAVE_NODE(SNID);
		/*  C = CURRENT_NODE_ID;  */
		call SET_SYM_NODE_R (ID);
		SIZE = SYM_NODE.SIZE;
		SIZE_UNITS = rank(SYM_NODE.SIZE_UNITS);
/*****
/*		if SYM_NODE.DCL_IN_PROGRESS then
/*			BOUNDARY = 0;
/*		else	BOUNDARY = rank(SYM_NODE.BOUNDARY);
*****/
		if SIZE_UNITS < BOUNDARY then
			SIZE = ROUNDU (SIZE, SIZE_UNITS, BOUNDARY);
		call RESTORE_NODE(SNID);
		/*  call SET_SYM_NODE (C);  */
	end;

/*****
/*	else if TYPE = LABEL_TC then do;
/*		SIZE = PTR_TYPE_SIZE;
/*		BOUNDARY = PTR_TYPE_BOUNDARY;
/*	end;
*****/

	else do;
		SIZE = 0;
		BOUNDARY = 0;
	end;

	return;

BACK_END_SIZE: entry(TYPE, ID, BOUNDARY) 
               external( X_BACK_END_SIZE );

declare THIS_TYPE type(SHORT_T);

	/*
	/* Special call to translate front-end type
	/* to back_end type & size.
	/**/
	THIS_TYPE = TYPE;
	ID     = CG_TYPE_TABLE(THIS_TYPE); /* returned CG type */
	BOUNDARY = CG_SIZE_TABLE(THIS_TYPE); /* returned FIELD1 value */
	return;

end SIZE_FROM_TYPE;

