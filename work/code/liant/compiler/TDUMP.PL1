/* C++ tdump.pl1 - Dump token data for debugging */

/***********************************************************************
 * This product is the property of Language Processors, Inc. and is    *
 * licensed pursuant to a written license agreement.  No portion of    *
 * this product may be reproduced without the written permission of    *
 * Language Processors, Inc. except pursuant to the license agreement. *
 ***********************************************************************/

/***********************************************************************
 *
 *  LPI EDIT HISTORY
 *
 *  11.20.89  DGM  Original.
 *
 ***********************************************************************/

/* ---------------------------------------------------------------------
/* Include files
/* ------------------------------------------------------------------- */

%include 'incfil';
%include C_STANDARD_DEFS_IN;
%include C_EXTERNAL_NAME_MAP_IN;
%include C_TOKEN_POD_PKG;
%include C_TOKEN_SPELLING_PKG;

/* ---------------------------------------------------------------------
/* TDUMP
/*
/* Dump token pod information to the standard output.
/* ------------------------------------------------------------------- */

TDUMP: procedure (TP);

	declare
		TP	pointer;

	declare
		WRITTT	entry   (character (*) varying)
			external,
		WRITNC	entry   (character (*) varying)
			external,
		WRITFW	entry   (character (*) varying, fixed binary (15))
			external,
		WRITNO	entry   (pointer, fixed binary (15),
			         fixed binary (15), fixed binary (15))
			external;

	declare
		T	fixed binary (15),
		L	fixed binary (31),
		S	character (256) varying;

	declare
		TOKEN_NAME	(LB_FE_TOKEN : HB_FE_TOKEN)
				character (18) varying
				static internal initial (

		/* Unused token */

		  'NULL_TOKEN'

		/* Other single character token (non-white-space) */

		, 'SINGLE_CHAR'

		/* Preprocessing number token */

		, 'PP_NUMBER'

		/* Identifier token */

		, 'IDENTIFIER'

		/* Constant tokens */

		, 'DEC_CONST'
		, 'OCT_CONST'
		, 'HEX_CONST'
		, 'FLOAT_CONST'
		, 'CHAR_CONST'
		, 'WCHAR_CONST'
		, 'COOKED_CHAR_CONST'
		, 'COOKED_WCHAR_CONST'

		/* String literal tokens */

		, 'STRING'
		, 'WSTRING'
		, 'COOKED_STRING'
		, 'COOKED_WSTRING'

		/* Operator and punctuator tokens */

		, 'COLON_COLON'
		, 'COLON'
		, 'SEMI_COLON'
		, 'DOT'
		, 'DOT_STAR'
		, 'QUESTION'
		, 'ELLIPSIS'
		, 'LCURLY'
		, 'RCURLY'
		, 'RSQUARE'
		, 'RPAREN'

		, 'LSQUARE'
		, 'LPAREN'
		, 'COMMA'
		, 'POINTER'
		, 'POINTER_STAR'

		, 'PLUS'
		, 'PLUS_PLUS'
		, 'MINUS'
		, 'MINUS_MINUS'

		, 'STAR'
		, 'SLASH'
		, 'MOD'
		, 'AND'
		, 'OR'
		, 'XOR'
		, 'TILDE'
		, 'NOT'
		, 'LSHIFT'
		, 'RSHIFT'
		, 'AND_AND'
		, 'OR_OR'
		, 'LESS_THAN'
		, 'LESS_EQUAL'
		, 'GREATER_THAN'
		, 'GREATER_EQUAL'
		, 'EQUAL_EQUAL'
		, 'NOT_EQUAL'
		, 'EQUAL'
		, 'PLUS_EQUAL'
		, 'MINUS_EQUAL'
		, 'STAR_EQUAL'
		, 'SLASH_EQUAL'
		, 'MOD_EQUAL'
		, 'AND_EQUAL'
		, 'OR_EQUAL'
		, 'XOR_EQUAL'
		, 'LSHIFT_EQUAL'
		, 'RSHIFT_EQUAL'

		/* Keyword tokens */

		, 'KW_NEW'
		, 'KW_DELETE'

		, 'KW_TYPEDEF'

		, 'KW_STATIC'
		, 'KW_EXTERN'
		, 'KW_AUTO'
		, 'KW_REGISTER'

		, 'KW_VOID'
		, 'KW_INT'
		, 'KW_CHAR'
		, 'KW_FLOAT'
		, 'KW_DOUBLE'
		, 'KW_LONG'
		, 'KW_SHORT'
		, 'KW_UNSIGNED'
		, 'KW_SIGNED'

		, 'KW_CLASS'
		, 'KW_STRUCT'
		, 'KW_UNION'
		, 'KW_ENUM'

		, 'KW_CONST'
		, 'KW_VOLATILE'

		, 'KW_PRIVATE'
		, 'KW_PROTECTED'
		, 'KW_PUBLIC'
		, 'KW_VIRTUAL'
		, 'KW_FRIEND'
		, 'KW_INLINE'
		, 'KW_OVERLOAD'
		, 'KW_OPERATOR'
		, 'KW_TEMPLATE'
		, 'KW_THIS'
		, 'KW_CATCH'

		, 'KW_SIZEOF'

		, 'KW_BREAK'
		, 'KW_CASE'
		, 'KW_CONTINUE'
		, 'KW_DEFAULT'
		, 'KW_DO'
		, 'KW_ELSE'
		, 'KW_FOR'
		, 'KW_GOTO'
		, 'KW_IF'
		, 'KW_RETURN'
		, 'KW_SWITCH'
		, 'KW_WHILE'

		/* Psuedo tokens */

		, 'BOF'
		, 'EOF'
		, 'BOF_INCLUDE'
		, 'EOF_INCLUDE'
		, 'LINE_FILE'
	);

	declare
		PP_TOKEN_NAME	(LB_PP_TOKEN : HB_PP_TOKEN)
				character (14) varying
				static internal initial (

 		/* Tokens used ONLY within the preprocessor */

		  'PP_KW_DEFINE'
		, 'PP_KW_ELIF'
		, 'PP_KW_ELSE'
		, 'PP_KW_ENDIF'
		, 'PP_KW_ERROR'
		, 'PP_KW_IF'
		, 'PP_KW_IFDEF'
		, 'PP_KW_IFNDEF'
		, 'PP_KW_INCLUDE'
		, 'PP_KW_LINE'
		, 'PP_KW_PRAGMA'
		, 'PP_KW_UNDEF'

		, 'PP_STRINGIZE'
		, 'PP_CHARIZE'
		, 'PP_TOKEN_PASTE'
		, 'PP_MACRO_PARAM'
	);

	if TP = null() then
		return;

	T = TP->TOKEN_POD.TYPE;

	if (T >= LB_FE_TOKEN) & (T <= HB_FE_TOKEN) then
		S = trim (TOKEN_NAME (TP->TOKEN_POD.TYPE));

	else if (T >= LB_PP_TOKEN) & (T <= HB_PP_TOKEN) then
		S = trim (PP_TOKEN_NAME (T));

	else	S = '-unknown-';

	S = S || ' [' || trim(char(T)) || ']';

	L = abs (TP->TOKEN_POD.LINE);

	if T = BOF_INCLUDE_TOKEN then call WRITTT ('');

	call WRITNO (addr (L), 4, 10, -4);
	call WRITNC (': ');
	call WRITFW (S, 22);
	call WRITNC (' {');
	if TP->TOKEN_POD.LINE < 0 then call WRITNC (' ');
	call WRITNC (TOKEN_SPELLING (TP));
	call WRITNC ('}');

	if (T = BOF_TOKEN) | (T = BOF_INCLUDE_TOKEN) |
	   (T = LINE_FILE_TOKEN) then do;
		TP->TOKEN_POD.TYPE = STRING_LITERAL_TOKEN;
		call WRITNC (' ');
		call WRITNC (TOKEN_SPELLING (TP));
		TP->TOKEN_POD.TYPE = T;
	end;

	else if (T = EOF_TOKEN) | (T = EOF_INCLUDE_TOKEN) then do;
		if TP->TOKEN_POD.SPELLING_PTR ^= null() then do;
			call WRITNC (' "');
			call WRITNC (TP->TOKEN_POD.SPELLING_PTR->
				     TOKEN_SPELLING_POD.SPELLING);
			call WRITNC ('"');
		end;
	end;

	call WRITTT ('');

end TDUMP;

/* ---------------------------------------------------------------------
/* TLDUMP
/* ------------------------------------------------------------------- */

TLDUMP: procedure (TP);

	declare TP	pointer;
	declare P	pointer;

	do P = TP repeat (P->TOKEN_POD.NEXT) while (P ^= null());
		call TDUMP (P);
	end;

end TLDUMP;

