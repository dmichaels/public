/* C++ emitcr.pl1 - Emit a COND_REF_OP for alternate/conditonal */

/************************************************************************
 * This product is the property of Liant Software Corporation and is    *
 * licensed pursuant to a written license agreement.  No portion of     *
 * this product may be reproduced without the written permission of     *
 * Liant Software Corporation except pursuant to the license agreement. *
 ************************************************************************/

/***********************************************************************
 *
 *  LPI EDIT HISTORY               [ Update the VERSION__ string below ]
 *
 *  03.26.92  DGM  006  New value-node scheme.
 *  01.27.91  PKT  005  Activated use of CXX_USING_PHOENIX flag.
 *  09.25.90  DGM  004  Preprocessor include file name changes.
 *  09.14.90  DGM  003  Changed include file names and VOP names.
 *  08.08.90  DGM  002  New type-node.
 *  06.05.90  DGM  001  Updated for the new utilities.
 *  04.05.90  TLF  000  Original.  Based on ANSI-C version.
 *                      **** NOTE ****
 *                      For this original version, this routine
 *                      ALWAYS returns 0.  For later ports to
 *                      PHOENIX machines, the code that actually 
 *                      does something will be executed.
 ***********************************************************************/

/* ---------------------------------------------------------------------
/* Version and copyright stamp
/* ------------------------------------------------------------------- */

declare	VERSION__	character (28) varying static internal initial

('@(#)LPI 03.26.92 006 EMITCR');

/* ---------------------------------------------------------------------
/* Include files
/* ------------------------------------------------------------------- */

%include 'incfil';
%include GLOBAL_IN;
%include CXX_UTL_DEFS_IN;
%include CXX_UTL_SYMBOL_TABLE_PKG;
%include CXX_UTL_VALUE_NODE_PKG;
%include CXX_STANDARD_DEFS_IN;
%include CXX_EXTERNAL_NAME_MAP_IN;
%include CXX_SYMBOL_TABLE_IN;
%include CXX_PP_TOKEN_TYPE_CODES_IN;
%include CXX_NODE_MGR_PKG;
%include CXX_TYPE_INFO_PKG;
%include CXX_VALUE_NODE_MGR_PKG;
%include CXX_VALUE_NODE_IN;
%include CXX_EMIT_VALUE_PKG;
%include CXX_COUNT_DOWN_VALUE_PKG;
%include CXX_OPERATOR_CODES_IN;

/* ---------------------------------------------------------------------
/* EMIT_COND_REF
/* ------------------------------------------------------------------- */

EMIT_COND_REF: procedure (V, N)
	       returns   (type (LONG_T))
	       external  (X_EMIT_COND_REF);

	declare
		V		type (CXX_VID_T), 
		N		type (SHORT_T);
	declare
		WORK_TYPE	type (TYPE_INFO_T);

	declare
		PV		type (CXX_VID_T),
		K		type (LONG_T);

	if ^CXX_USING_PHOENIX then
		return (0);

	if V->CXX_VALUE_NODE.TOP_TYPE.CODE = byte (VOID_BT) then do;
		/*
		/* Non-value producing if void,
		/* then no COND_REF/COND_VALUE involved.
		/**/
		return (0);
	end;

	/* Page type tree; get type info for COND_REF */

	CXX_VALUE_NODE_PTR = V;
	call GET_VALUE_TYPE (WORK_TYPE);

	/* Make a COND_REF; copy type-info */

	PV = ALLOC_CXX_VALUE_NODE (COND_REF_VO);
	call SET_VALUE_TYPE (WORK_TYPE);

	/* Set count on COND_REF and emit operator */

	PV->CXX_VALUE_NODE.COUNT = N;
	K = EMIT_VALUE (PV, 0, 0, 0, 0, 0);

	/* Reset the count and free it */

	PV->CXX_VALUE_NODE.COUNT = 1;
	call COUNT_DOWN_VALUE (PV);

	/* Return operator id */

	return (K);

end EMIT_COND_REF;

