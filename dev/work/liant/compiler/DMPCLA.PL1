/* C++ dmpcla.pl1 - Dump the entire layout of global scope classes */

/************************************************************************
 * This product is the property of Liant Software Corporation and is    *
 * licensed pursuant to a written license agreement.  No portion of     *
 * this product may be reproduced without the written permission of     *
 * Liant Software Corporation except pursuant to the license agreement. *
 ************************************************************************/

/***********************************************************************
 *
 *  LPI EDIT HISTORY               [ Update the VERSION__ string below ]
 *
 *  03.26.92  DGM  007  New value-node scheme.
 *  12.12.90  DGM  005  Updated to use CXX_PRINT_TYPE_PKG.
 *  11.15.90  DGM  004  Updated.
 *  10.12.90  DGM  003  Updated.
 *  09.25.90  DGM  002  Updated.
 *  09.14.90  DGM  001  Changed include file names and VOP names.
 *  06.26.90  DGM  000  Original.
 *
 ***********************************************************************/

/* ---------------------------------------------------------------------
/* Version and copyright stamp
/* ------------------------------------------------------------------- */

declare	VERSION__	character (28) varying static internal initial

('@(#)LPI 03.26.92 007 DMPCLA');

/* ---------------------------------------------------------------------
/* Include files
/* ------------------------------------------------------------------- */

%include 'incfil';
%include GLOBAL_IN;
%include CXX_UTL_DEFS_IN;
%include CXX_UTL_SYMBOL_TABLE_PKG;
%include CXX_UTL_WRITE_PKG;
%include CXX_STANDARD_DEFS_IN;
%include CXX_EXTERNAL_NAME_MAP_IN;
%include CXX_SYMBOL_TABLE_IN;
%include CXX_GLOBAL_SEMANTIC_DATA_IN;
%include CXX_NODE_MGR_PKG;
%include CXX_PRINT_CLASS_LAYOUT_PKG;

/* ---------------------------------------------------------------------
/* DUMP_CLASSES
/*
/* Dump the layout of the class symbols at global scope.
/* Preserves current-node-id.
/* ------------------------------------------------------------------- */

DUMP_CLASSES: procedure external (X_DUMP_CLASSES);

	declare
		(S, NEXT_S)	type (NID_T),
		(SP, SCOPE_PTR)	type (POINTER_T);

	if CURRENT_GLOBAL_SCOPE = NULL_NID then
		return;

	call GET_SCOPE_NODE_R (CURRENT_GLOBAL_SCOPE, SCOPE_PTR);

	if SCOPE_PTR->SCOPE_NODE.SYMBOLS ^= NULL_NID then do;
		call WRITE_DEBUG_LINE ('');
		call WRITE_DEBUG_LINE ('LAYOUT OF CLASSES (GLOBAL SCOPE)');
		call WRITE_DEBUG_LINE ('--------------------------------');
	end;

	do S = SCOPE_PTR->SCOPE_NODE.SYMBOLS repeat (NEXT_S) while (S > 0);
		call GET_SYM_NODE_R (S, SP);
		if SP->SYM_NODE.IS_AGGREGATE_TAG then
			call PRINT_CLASS_LAYOUT (S);
		NEXT_S = SP->SYM_NODE.NEXT_SYMBOL;
		call RELEASE_SYM_NODE (S);
	end;

	call RELEASE_SCOPE_NODE (CURRENT_GLOBAL_SCOPE);

end DUMP_CLASSES;

