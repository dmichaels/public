struct PixelMap {

    private var _pixels: [UInt8]
    private var _pixelsWidth: Int
    private var _pixelsHeight: Int
    private var _scale: Int
    private let _depth: Int = 4

    init(_ width: Int, _ height: Int, scale: Int = 1) {
        self._pixelsWidth = width
        self._pixelsHeight = height
        self._scale = scale
        self._pixels = [UInt8](repeating: 0, count: self._pixelsWidth * self._pixelsHeight * self._depth)
    }

    var width: Int {
        return (self._pixelsWidth + self._scale - 1) / self._scale
    }

    var height: Int {
        return (self._pixelsHeight + self._scale - 1) / self._scale
    }

    var data: UnsafeMutablePointer<UInt8> {
        return UnsafeMutablePointer(mutating: self._pixels)
    }

    mutating func write(_ x: Int, _ y: Int, red: UInt8, green: UInt8, blue: UInt8, transparency: UInt8 = 255) {
        for dy in 0..<self._scale {
            for dx in 0..<self._scale {
                let ix = x * self._scale + dx
                let iy = y * self._scale + dy
                let i = (iy * self._pixelsWidth + ix) * self._depth
                if (i < self._pixels.count) {
                    self._pixels[i] = red
                    self._pixels[i + 1] = green
                    self._pixels[i + 2] = blue
                    self._pixels[i + 3] = transparency
                }
            }
        }
    }
}
